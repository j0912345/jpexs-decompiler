/* The following code was generated by JFlex 1.6.0 */

/*
 *  Copyright (C) 2010-2016 JPEXS, All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */
package com.jpexs.decompiler.flash.abc.avm2.parser.script;
import com.jpexs.decompiler.flash.abc.avm2.parser.AVM2ParseException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.math.BigInteger;
import macromedia.asc.util.Decimal128;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import com.jpexs.decompiler.flash.abc.types.Float4;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>E:/ffdec_sourceCode/dev/libsrc/ffdec_lib/lexers/actionscript3_script.flex</tt>
 */
public final class ActionScriptLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int XMLOPENTAG = 6;
  public static final int XMLCLOSETAGFINISH = 8;
  public static final int XMLOPENTAGATTRIB = 10;
  public static final int XMLINSTR = 12;
  public static final int XMLCDATA = 14;
  public static final int XMLCOMMENT = 16;
  public static final int XML = 18;
  public static final int OIDENTIFIER = 20;
  public static final int XMLCDATAALONE = 22;
  public static final int XMLCOMMENTALONE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\112\1\3\1\1\22\0\1\13\1\14\1\33"+
    "\1\64\1\6\1\111\1\106\1\34\1\53\1\55\1\5\1\60\1\54"+
    "\1\15\1\11\1\4\1\35\3\42\1\52\3\42\2\21\1\17\1\104"+
    "\1\12\1\32\1\16\1\23\1\63\1\27\1\20\1\25\1\26\1\56"+
    "\1\20\2\10\1\101\12\10\1\30\3\10\1\40\2\10\1\24\1\61"+
    "\1\31\1\110\1\10\1\0\1\50\1\67\1\41\1\44\1\57\1\45"+
    "\1\65\1\75\1\66\1\10\1\71\1\46\1\43\1\73\1\47\1\76"+
    "\1\10\1\70\1\72\1\51\1\36\1\100\1\74\1\37\1\77\1\10"+
    "\1\102\1\107\1\103\1\105\6\0\1\112\41\0\1\62\2\0\1\6"+
    "\12\0\1\6\1\0\1\22\2\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\1\0\5\7\2\0\246\6\1\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\35\0\13\7\5\0\53\6\37\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\7\7\2\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\20\0\1\6"+
    "\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6"+
    "\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6"+
    "\3\7\1\6\5\7\22\0\31\6\3\7\104\0\23\6\61\0\40\7"+
    "\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7"+
    "\1\0\20\6\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\2\6\17\0\3\7\1\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7"+
    "\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0"+
    "\1\7\16\0\12\7\20\0\4\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\20\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\21\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6"+
    "\16\0\3\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\6\0\12\7\2\0\2\7\15\0"+
    "\60\6\1\7\2\6\7\7\5\0\7\6\10\7\1\0\12\7\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0"+
    "\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"+
    "\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7"+
    "\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6"+
    "\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7"+
    "\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6"+
    "\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6"+
    "\3\0\3\7\10\6\7\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\4\0\1\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\37\6\1\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\10\0\16\7\102\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7"+
    "\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\1\0\2\7\6\0\300\6\66\7\6\0\4\7\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\3\0\14\0\2\0\32\0"+
    "\1\112\1\112\25\0\2\7\23\0\1\7\33\0\1\0\1\6\15\0"+
    "\1\6\20\0\15\6\63\0\15\7\4\0\1\7\3\0\14\7\21\0"+
    "\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0"+
    "\4\6\5\0\5\6\4\0\1\6\21\0\43\7\2\6\4\7\7\0"+
    "\u0a70\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6"+
    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\40\7\57\0\1\6\u01c0\0\21\0\4\0\2\6\1\7\31\0\17\7"+
    "\1\0\5\6\2\0\3\7\2\6\4\0\126\6\2\0\2\7\2\0"+
    "\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0"+
    "\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0"+
    "\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7"+
    "\4\0\12\7\1\0\37\6\1\0\1\7\106\6\14\7\45\0\11\6"+
    "\2\0\147\6\2\0\4\6\1\0\36\6\2\0\2\6\105\0\13\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\30\0\64\6\14\0"+
    "\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6"+
    "\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0"+
    "\4\7\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7\12\6"+
    "\12\7\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7"+
    "\2\0\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7\1\6"+
    "\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6"+
    "\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6"+
    "\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0\4\6"+
    "\4\0\2\6\132\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0"+
    "\u2ba4\6\14\0\27\6\4\0\61\6\4\0\u1800\0\u0900\0\u016e\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\10\0\40\0\14\6"+
    "\4\0\20\7\20\0\16\7\5\0\2\7\30\0\3\7\40\0\5\6"+
    "\1\0\207\6\23\0\12\7\7\0\32\6\4\0\1\7\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\41\0\2\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0"+
    "\17\6\2\0\16\6\42\0\173\6\105\0\65\7\210\0\1\7\202\0"+
    "\35\6\3\0\61\6\17\0\1\7\37\0\40\6\20\0\21\6\1\7"+
    "\10\6\1\7\5\0\46\6\5\7\5\0\36\6\2\0\44\6\4\0"+
    "\10\6\1\0\5\7\52\0\236\6\2\0\12\7\126\0\50\6\10\0"+
    "\64\6\234\0\u0137\6\11\0\26\6\12\0\10\6\230\0\6\6\2\0"+
    "\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\12\0"+
    "\27\6\11\0\37\6\141\0\26\6\12\0\32\6\106\0\70\6\6\0"+
    "\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0"+
    "\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6\3\0"+
    "\35\6\43\0\10\6\1\0\34\6\2\7\31\0\66\6\12\0\26\6"+
    "\12\0\23\6\15\0\22\6\156\0\111\6\u03b7\0\3\7\65\6\17\7"+
    "\37\0\12\7\17\0\4\7\55\6\13\7\25\0\31\6\7\0\12\7"+
    "\6\0\3\7\44\6\16\7\1\0\12\7\20\0\43\6\1\7\2\0"+
    "\1\6\11\0\3\7\60\6\16\7\4\6\13\0\12\7\1\6\45\0"+
    "\22\6\1\0\31\6\14\7\170\0\57\6\14\7\5\0\12\7\7\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\11\0\1\7\5\0\5\6\2\7\2\0\7\7\3\0\5\7"+
    "\u010b\0\60\6\24\7\2\6\1\0\1\6\10\0\12\7\246\0\57\6"+
    "\7\7\2\0\11\7\77\0\60\6\21\7\3\0\1\6\13\0\12\7"+
    "\46\0\53\6\15\7\10\0\12\7\u01d6\0\100\6\12\7\25\0\1\6"+
    "\u01c0\0\71\6\u0507\0\u0399\6\147\0\157\7\u0b91\0\u042f\6\u33d1\0\u0239\6"+
    "\7\0\37\6\1\0\12\7\146\0\36\6\2\0\5\7\13\0\60\6"+
    "\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0\23\6\u0370\0"+
    "\105\6\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6\u0bfe\0"+
    "\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\7\u14c6\0"+
    "\5\7\3\0\6\7\10\0\10\7\2\0\7\7\36\0\4\7\224\0"+
    "\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0"+
    "\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0"+
    "\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0"+
    "\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\10\6\2\0\62\7\u1000\0\305\6\13\0\7\7\u0529\0\4\6\1\0"+
    "\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0"+
    "\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0"+
    "\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0"+
    "\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\15\7\6\1\24\1\25"+
    "\1\26\1\6\1\27\1\30\1\31\1\1\12\6\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\43\1\44\1\1\1\42\2\45\1\46\2\47\1\42"+
    "\2\1\1\50\1\51\1\42\1\52\2\1\1\53\3\42"+
    "\2\54\2\42\1\55\1\56\1\1\1\57\2\42\1\0"+
    "\1\60\1\0\1\61\1\0\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\0\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\15\1\65\1\101\1\0"+
    "\1\102\1\103\1\104\1\65\1\105\1\0\5\6\1\106"+
    "\10\6\1\107\6\6\1\110\1\111\2\0\2\112\2\6"+
    "\1\113\1\114\1\115\21\6\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\2\124\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\0\1\136\1\0"+
    "\1\137\1\0\1\140\1\141\3\0\1\142\2\0\1\143"+
    "\3\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
    "\1\144\2\0\1\154\2\60\2\0\1\154\2\0\1\154"+
    "\1\155\1\156\2\0\1\157\1\160\1\161\1\0\1\65"+
    "\1\162\1\163\1\164\12\6\1\165\4\6\1\166\6\6"+
    "\1\167\1\170\1\112\1\171\7\6\1\172\4\6\1\173"+
    "\7\6\1\174\1\6\1\175\1\176\2\0\1\177\1\200"+
    "\1\0\1\201\2\0\1\202\4\0\1\203\1\204\1\154"+
    "\2\0\1\154\1\60\2\154\1\205\1\0\1\206\5\6"+
    "\1\207\10\6\1\210\1\211\3\6\1\212\1\213\11\6"+
    "\1\214\2\6\1\215\5\6\1\216\1\6\1\0\1\217"+
    "\1\0\1\220\1\221\2\0\1\222\1\0\1\223\1\154"+
    "\1\60\3\154\1\0\1\6\1\224\1\6\1\225\1\226"+
    "\5\6\1\227\1\230\1\6\1\231\6\6\1\232\1\6"+
    "\1\233\4\6\1\234\5\6\1\0\4\154\1\0\3\6"+
    "\1\235\5\6\1\236\2\6\1\237\3\6\1\240\1\241"+
    "\1\242\1\6\1\243\1\244\4\6\1\0\4\154\1\0"+
    "\2\6\1\245\1\246\1\6\2\0\1\247\1\6\1\250"+
    "\5\6\1\251\1\6\1\252\1\6\1\0\4\154\1\0"+
    "\1\6\1\253\1\254\2\0\1\255\2\6\1\256\3\6"+
    "\1\257\1\0\1\154\1\260\1\261\4\0\1\6\1\262"+
    "\1\6\1\263\1\264\1\265\4\0\1\266\1\267\22\0"+
    "\1\270\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u03cf"+
    "\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u03cf\0\u03cf\0\u07e9\0\u03cf"+
    "\0\u03cf\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6"+
    "\0\u0a41\0\u03cf\0\u03cf\0\u03cf\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d"+
    "\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5"+
    "\0\u0e10\0\u0e5b\0\u0ea6\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u0ef1"+
    "\0\u0f3c\0\u0f87\0\u0fd2\0\u101d\0\u1068\0\u03cf\0\u03cf\0\u10b3"+
    "\0\u10fe\0\u1149\0\u03cf\0\u03cf\0\u1194\0\u03cf\0\u11df\0\u122a"+
    "\0\u1275\0\u03cf\0\u03cf\0\u12c0\0\u03cf\0\u130b\0\u1356\0\u03cf"+
    "\0\u03cf\0\u13a1\0\u13ec\0\u1437\0\u03cf\0\u1482\0\u14cd\0\u03cf"+
    "\0\u03cf\0\u1518\0\u03cf\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f"+
    "\0\u15f9\0\u16da\0\u03cf\0\u1725\0\u03cf\0\u1770\0\u03cf\0\u17bb"+
    "\0\u1806\0\u1851\0\u03cf\0\u03cf\0\u189c\0\u03cf\0\u03cf\0\u18e7"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u1932\0\u03cf\0\u03cf"+
    "\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u0546\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97"+
    "\0\u1de2\0\u1e2d\0\u0546\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4"+
    "\0\u1fef\0\u03cf\0\u03cf\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166"+
    "\0\u21b1\0\u0546\0\u0546\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328"+
    "\0\u2373\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580"+
    "\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u03cf\0\u2742\0\u03cf"+
    "\0\u278d\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u27d8\0\u2823"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u1275"+
    "\0\u03cf\0\u130b\0\u03cf\0\u1356\0\u03cf\0\u03cf\0\u286e\0\u28b9"+
    "\0\u2904\0\u294f\0\u299a\0\u29e5\0\u03cf\0\u03cf\0\u2a30\0\u2a7b"+
    "\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u2ac6"+
    "\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u03cf\0\u2c3d\0\u2c88\0\u2cd3"+
    "\0\u2d1e\0\u2d69\0\u2db4\0\u03cf\0\u03cf\0\u2dff\0\u2e4a\0\u03cf"+
    "\0\u2e95\0\u03cf\0\u2ee0\0\u2f2b\0\u03cf\0\u1a5e\0\u0546\0\u2f76"+
    "\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce"+
    "\0\u3219\0\u0546\0\u3264\0\u32af\0\u32fa\0\u3345\0\u0546\0\u3390"+
    "\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u03cf\0\u03cf"+
    "\0\u0546\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f"+
    "\0\u0546\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u0546\0\u38d6\0\u3921"+
    "\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u0546\0\u3ae3\0\u03cf"+
    "\0\u03cf\0\u3b2e\0\u3b79\0\u03cf\0\u03cf\0\u3bc4\0\u03cf\0\u3c0f"+
    "\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u03cf\0\u03cf"+
    "\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u2cd3\0\u3f48\0\u3f93\0\u03cf"+
    "\0\u3fde\0\u03cf\0\u4029\0\u4074\0\u40bf\0\u410a\0\u4155\0\u0546"+
    "\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u42cc\0\u4317\0\u4362\0\u43ad"+
    "\0\u0546\0\u0546\0\u43f8\0\u4443\0\u448e\0\u0546\0\u0546\0\u44d9"+
    "\0\u4524\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b\0\u46e6\0\u4731"+
    "\0\u0546\0\u477c\0\u47c7\0\u0546\0\u4812\0\u485d\0\u48a8\0\u48f3"+
    "\0\u493e\0\u0546\0\u4989\0\u2823\0\u03cf\0\u49d4\0\u03cf\0\u03cf"+
    "\0\u4a1f\0\u2a7b\0\u03cf\0\u4a6a\0\u03cf\0\u4ab5\0\u2ba7\0\u4b00"+
    "\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u0546\0\u4c77\0\u0546\0\u0546"+
    "\0\u4cc2\0\u4d0d\0\u4d58\0\u4da3\0\u4dee\0\u0546\0\u4e39\0\u4e84"+
    "\0\u0546\0\u4ecf\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u5046\0\u0546"+
    "\0\u5091\0\u0546\0\u50dc\0\u5127\0\u5172\0\u51bd\0\u0546\0\u5208"+
    "\0\u5253\0\u529e\0\u52e9\0\u5334\0\u537f\0\u53ca\0\u5415\0\u5460"+
    "\0\u54ab\0\u54f6\0\u5541\0\u558c\0\u55d7\0\u0546\0\u5622\0\u566d"+
    "\0\u56b8\0\u5703\0\u574e\0\u0546\0\u5799\0\u57e4\0\u0546\0\u582f"+
    "\0\u587a\0\u58c5\0\u0546\0\u0546\0\u0546\0\u5910\0\u0546\0\u0546"+
    "\0\u595b\0\u59a6\0\u59f1\0\u5a3c\0\u5a87\0\u5ad2\0\u5b1d\0\u5b68"+
    "\0\u5bb3\0\u5bfe\0\u5c49\0\u5c94\0\u0546\0\u0546\0\u5cdf\0\u5d2a"+
    "\0\u5d75\0\u0546\0\u5dc0\0\u0546\0\u5e0b\0\u5e56\0\u5ea1\0\u5eec"+
    "\0\u5f37\0\u0546\0\u5f82\0\u0546\0\u5fcd\0\u6018\0\u03cf\0\u2c88"+
    "\0\u6063\0\u15f9\0\u60ae\0\u60f9\0\u0546\0\u0546\0\u6144\0\u618f"+
    "\0\u0546\0\u61da\0\u6225\0\u0546\0\u6270\0\u62bb\0\u6306\0\u0546"+
    "\0\u6351\0\u2c3d\0\u03cf\0\u0546\0\u639c\0\u63e7\0\u6432\0\u647d"+
    "\0\u64c8\0\u0546\0\u6513\0\u0546\0\u0546\0\u03cf\0\u655e\0\u65a9"+
    "\0\u65f4\0\u663f\0\u0546\0\u0546\0\u668a\0\u66d5\0\u6720\0\u676b"+
    "\0\u67b6\0\u6801\0\u684c\0\u6897\0\u68e2\0\u692d\0\u6978\0\u69c3"+
    "\0\u6a0e\0\u6a59\0\u6aa4\0\u6aef\0\u6b3a\0\u6b85\0\u03cf\0\u6bd0"+
    "\0\u6c1b\0\u6c66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\16"+
    "\1\24\1\25\1\26\1\21\1\27\1\30\1\31\1\32"+
    "\1\24\1\33\1\16\1\34\1\35\4\24\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\24\1\44\1\33\1\24"+
    "\1\45\1\46\1\24\1\47\1\50\1\51\1\33\1\52"+
    "\1\53\1\54\1\24\1\55\1\56\1\16\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\24\1\66\1\67"+
    "\1\70\1\24\1\71\1\24\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\16\1\104"+
    "\1\105\1\106\30\104\1\107\25\104\1\110\31\104\1\111"+
    "\1\112\1\113\31\111\1\114\24\111\1\110\31\111\1\16"+
    "\1\115\1\116\1\117\1\120\3\16\1\121\2\16\1\117"+
    "\2\16\1\122\2\121\4\16\4\121\5\16\4\121\1\16"+
    "\7\121\4\16\2\121\5\16\15\121\1\123\11\16\1\115"+
    "\1\116\10\16\1\124\2\16\1\125\127\16\1\126\1\127"+
    "\45\16\1\130\10\16\1\131\1\115\1\116\20\131\1\132"+
    "\70\131\1\115\1\116\26\131\1\133\62\131\1\134\1\135"+
    "\12\131\1\136\76\131\1\115\1\116\7\131\1\137\67\131"+
    "\1\140\10\131\1\141\1\112\1\113\56\141\1\142\1\143"+
    "\30\141\1\131\1\115\1\116\26\131\1\144\62\131\1\134"+
    "\1\135\12\131\1\145\75\131\115\0\1\20\113\0\1\21"+
    "\7\0\1\21\77\0\1\146\2\0\1\146\1\147\1\150"+
    "\24\146\1\151\26\146\1\152\31\146\32\0\1\153\66\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\15\24\22\0\1\154\1\155\6\0\1\156"+
    "\13\0\1\156\4\0\1\156\7\0\1\156\1\157\47\0"+
    "\1\160\1\0\1\161\1\0\1\162\2\0\2\160\4\0"+
    "\4\160\1\0\1\163\3\0\4\160\1\0\7\160\4\0"+
    "\2\160\5\0\15\160\1\164\42\0\1\165\75\0\1\166"+
    "\14\0\1\167\76\0\1\170\13\0\1\171\77\0\1\172"+
    "\104\0\1\156\7\0\1\33\13\0\1\33\1\173\3\0"+
    "\1\33\2\174\1\175\4\0\1\33\3\0\2\176\6\0"+
    "\1\173\35\0\1\177\11\0\1\200\121\0\1\201\71\0"+
    "\1\156\7\0\1\202\13\0\1\203\1\173\2\204\1\0"+
    "\1\203\2\174\1\175\4\0\1\203\3\0\2\176\6\0"+
    "\1\173\32\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\5\24\1\205\1\206\6\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\11\24"+
    "\1\207\1\210\1\211\2\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\12\24"+
    "\1\212\3\24\3\0\1\24\1\213\5\0\12\24\1\214"+
    "\2\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\1\24\1\215\7\24\1\216\1\217\1\220\2\24\3\0"+
    "\2\24\5\0\1\24\1\221\13\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\13\24\1\222\1\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\5\0\5\24\1\223"+
    "\7\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\3\24\1\224\4\24\1\225"+
    "\1\24\1\226\2\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\2\24\1\227\6\24\1\230\1\24\1\231"+
    "\2\24\3\0\2\24\5\0\15\24\43\0\1\232\25\0"+
    "\1\233\114\0\1\234\63\0\1\235\100\0\1\236\13\0"+
    "\1\237\4\0\1\236\7\0\1\236\46\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\1\24\1\240"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\6\24\1\241\1\24\1\242\5\24\3\0\2\24"+
    "\5\0\5\24\1\243\1\244\6\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\3\24\1\245\11\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\1\24\1\246\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\1\24"+
    "\1\247\12\24\1\250\1\24\3\0\1\24\1\251\5\0"+
    "\7\24\1\252\5\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\1\24\1\253\11\24\1\254\2\24\3\0"+
    "\1\24\1\255\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\5\0\1\24"+
    "\1\256\6\24\1\257\4\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\1\24\1\260\11\24\1\261\2\24"+
    "\3\0\2\24\5\0\3\24\1\262\11\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\12\24\1\263\1\264"+
    "\2\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\6\24\1\265\6\24\43\0\1\266\53\0\1\267\36\0"+
    "\1\270\54\0\1\271\35\0\1\272\112\0\1\273\60\0"+
    "\1\104\2\0\30\104\1\0\25\104\1\0\31\104\2\0"+
    "\1\106\110\0\1\274\3\0\27\274\1\275\1\276\1\274"+
    "\1\277\1\300\5\274\1\301\3\274\1\302\7\274\1\303"+
    "\5\274\1\304\1\305\2\274\1\306\16\274\1\0\1\111"+
    "\2\0\31\111\1\0\24\111\1\0\31\111\2\0\1\113"+
    "\112\0\1\116\113\0\1\117\7\0\1\117\115\0\1\307"+
    "\104\0\2\310\3\0\1\310\1\0\4\310\2\0\4\310"+
    "\1\0\1\311\2\0\16\310\3\0\2\310\5\0\15\310"+
    "\24\0\1\124\77\0\1\312\2\0\30\312\1\313\57\312"+
    "\1\314\2\0\31\314\1\315\56\314\16\0\1\316\125\0"+
    "\1\317\63\0\1\135\125\0\1\320\101\0\1\321\3\0"+
    "\1\322\3\0\1\323\2\0\2\322\2\0\1\324\1\0"+
    "\4\322\5\0\4\322\1\0\7\322\4\0\2\322\5\0"+
    "\15\322\1\325\10\0\1\326\3\0\32\326\1\327\1\330"+
    "\5\326\1\331\3\326\1\332\7\326\1\333\1\334\4\326"+
    "\1\335\1\336\2\326\1\337\6\326\1\340\7\326\32\0"+
    "\1\341\76\0\1\342\75\0\1\146\2\0\1\146\1\343"+
    "\54\146\1\152\31\146\1\147\1\344\1\345\110\147\1\346"+
    "\2\347\1\346\1\350\1\351\53\346\1\352\31\346\1\146"+
    "\2\0\1\146\1\353\54\146\1\152\31\146\11\0\1\354"+
    "\122\0\1\156\13\0\1\156\4\0\1\156\2\174\1\175"+
    "\4\0\1\156\3\0\2\176\43\0\2\160\3\0\1\160"+
    "\1\0\4\160\2\0\4\160\4\0\16\160\3\0\2\160"+
    "\5\0\15\160\43\0\1\355\75\0\1\356\6\0\1\357"+
    "\120\0\1\360\76\0\1\361\13\0\1\362\75\0\1\363"+
    "\3\0\1\364\13\0\1\364\4\0\1\364\7\0\1\364"+
    "\5\0\1\363\64\0\1\365\71\0\1\156\7\0\1\202"+
    "\13\0\1\202\4\0\1\202\2\174\1\175\4\0\1\202"+
    "\3\0\2\176\44\0\1\156\7\0\1\202\13\0\1\203"+
    "\4\0\1\203\2\174\1\175\4\0\1\203\3\0\2\176"+
    "\53\0\2\366\3\0\3\366\5\0\1\366\3\0\2\366"+
    "\1\0\2\366\2\0\1\366\1\0\1\366\3\0\2\366"+
    "\7\0\1\366\31\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\367\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\7\24\1\370"+
    "\6\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\13\24\1\371\2\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\5\0\6\24\1\372"+
    "\6\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\14\24\1\373\1\24\3\0\2\24\5\0\5\24\1\374"+
    "\7\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\10\24\1\375\1\376\4\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\5\0\6\24\1\377\6\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\6\24\1\u0100\6\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\12\24\1\u0101\3\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\5\0\3\24\1\u0102\11\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\11\24"+
    "\1\u0103\4\24\3\0\2\24\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\6\24\1\u0104\6\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\1\24\1\u0105\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\1\24\1\u0106\14\24\3\0\2\24\5\0\12\24\1\u0107"+
    "\2\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\1\24\1\u0108\1\24\1\u0109"+
    "\11\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\11\24\1\u010a\3\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\14\24\1\u010b"+
    "\1\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\5\24\1\u010c\7\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\4\24\1\u010d\11\24\3\0\2\24\5\0"+
    "\15\24\17\0\1\u010e\1\0\1\u010e\7\0\1\u010e\4\0"+
    "\4\u010e\5\0\4\u010e\1\0\7\u010e\4\0\2\u010e\5\0"+
    "\15\u010e\11\0\1\235\2\0\30\235\1\u010f\57\235\21\0"+
    "\1\236\13\0\1\236\1\u0110\3\0\1\236\7\0\1\236"+
    "\13\0\1\u0110\62\0\1\u0110\27\0\1\u0110\32\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\14\24\1\u0111\1\24"+
    "\3\0\2\24\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\5\0\11\24"+
    "\1\u0112\3\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\14\24\1\u0113\1\24\3\0\2\24\5\0\5\24"+
    "\1\u0114\7\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u0115\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\14\24\1\u0116"+
    "\1\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\11\24\1\u0117\3\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\13\24\1\u0118\2\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\14\24\1\u0119\1\24\3\0\2\24\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\1\24\1\u011a\13\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\11\24\1\u011b\4\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\6\24\1\u011c\5\24\1\u011d\1\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\5\0\7\24\1\u011e"+
    "\5\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\14\24\1\u011f\1\24\3\0\2\24\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\1\24\1\u0120\13\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\2\24\1\u0121\12\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\4\24\1\u0122\11\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\12\24\1\u0123\3\24\3\0\2\24\5\0\1\24\1\u0124"+
    "\13\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\1\24\1\u0125\13\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\3\24\1\u0126\11\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\10\24\1\u0127\5\24\3\0"+
    "\2\24\5\0\15\24\43\0\1\u0128\112\0\1\u0129\100\0"+
    "\2\u012a\3\0\3\u012a\5\0\1\u012a\3\0\2\u012a\1\0"+
    "\2\u012a\2\0\1\u012a\1\0\1\u012a\3\0\2\u012a\7\0"+
    "\1\u012a\43\0\2\u012b\3\0\3\u012b\5\0\1\u012b\3\0"+
    "\2\u012b\1\0\2\u012b\2\0\1\u012b\1\0\1\u012b\3\0"+
    "\2\u012b\7\0\1\u012b\41\0\1\u012c\112\0\1\u012d\104\0"+
    "\1\u012e\6\0\2\u012e\4\0\4\u012e\5\0\4\u012e\1\0"+
    "\7\u012e\4\0\2\u012e\5\0\15\u012e\1\u012f\20\0\2\322"+
    "\3\0\1\322\1\0\4\322\2\0\4\322\4\0\16\322"+
    "\3\0\2\322\5\0\15\322\26\0\1\u0130\6\0\1\u0131"+
    "\76\0\1\u0132\6\0\2\u0132\4\0\4\u0132\5\0\4\u0132"+
    "\1\0\7\u0132\4\0\2\u0132\5\0\15\u0132\31\0\2\u0133"+
    "\3\0\3\u0133\5\0\1\u0133\3\0\2\u0133\1\0\2\u0133"+
    "\2\0\1\u0133\1\0\1\u0133\3\0\2\u0133\7\0\1\u0133"+
    "\43\0\2\u0134\3\0\3\u0134\5\0\1\u0134\3\0\2\u0134"+
    "\1\0\2\u0134\2\0\1\u0134\1\0\1\u0134\3\0\2\u0134"+
    "\7\0\1\u0134\44\0\1\u0135\13\0\1\u0136\4\0\1\u0135"+
    "\7\0\1\u0135\56\0\1\u0137\112\0\1\u0138\133\0\1\u0139"+
    "\3\0\1\u0139\21\0\2\u0139\3\0\1\u0139\22\0\1\345"+
    "\110\0\1\346\2\347\1\346\1\350\1\u013a\53\346\1\352"+
    "\31\346\5\347\1\u013b\112\347\1\u013b\31\347\1\u013c\3\347"+
    "\1\u013c\21\347\2\u013c\3\347\1\u013c\20\347\1\346\2\347"+
    "\1\346\1\u013d\1\351\53\346\1\352\32\346\2\347\1\346"+
    "\1\u013e\1\u013a\53\346\1\352\31\346\1\146\2\0\1\146"+
    "\1\343\32\146\1\u013f\3\146\1\u013f\15\146\1\152\3\146"+
    "\2\u013f\3\146\1\u013f\20\146\15\0\1\u0140\122\0\1\u0141"+
    "\117\0\1\u0142\101\0\1\364\13\0\1\364\4\0\1\364"+
    "\7\0\1\364\61\0\1\364\13\0\1\364\4\0\1\364"+
    "\2\174\1\175\4\0\1\364\46\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\1\24\1\u0143\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\5\24\1\u0144\7\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\14\24\1\u0145"+
    "\1\24\3\0\2\24\5\0\5\24\1\u0146\7\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\4\24\1\u0147"+
    "\11\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\1\24\1\u0148"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\13\24\1\u0149\2\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\16\24"+
    "\3\0\1\24\1\u014a\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\13\24\1\u014b\2\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\4\24\1\u014c\11\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\13\24\1\u014d\2\24\3\0\2\24\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\5\24\1\u014e\7\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\13\24\1\u014f\2\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\5\0\3\24\1\u0150"+
    "\11\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u0151\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\5\24\1\u0152\7\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\12\24\1\u0153\3\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u0154\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u0155\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\1\24\1\u0156\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\10\24\1\u0157\4\24\17\0"+
    "\3\u010e\7\0\2\u010e\3\0\4\u010e\4\0\16\u010e\3\0"+
    "\2\u010e\5\0\15\u010e\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\11\24\1\u0158\1\u0159\3\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u015a\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\14\24\1\u015b"+
    "\1\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\13\24\1\u015c\2\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\1\24\1\u015d\14\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u015e\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\14\24\1\u015f\1\24"+
    "\3\0\2\24\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\14\24\1\u0160\1\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\11\24\1\u0161\4\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\16\24"+
    "\3\0\1\24\1\u0162\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\1\24\1\u0163\13\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\5\0\10\24\1\u0164"+
    "\4\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\11\24\1\u0165\4\24\3\0\2\24\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\11\24\1\u0166"+
    "\4\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\4\24\1\u0167\10\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\14\24\1\u0168\1\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\13\24\1\u0169\1\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\7\24\1\u016a"+
    "\6\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\1\24\1\u016b\13\24\31\0\2\u016c\3\0\3\u016c\5\0"+
    "\1\u016c\3\0\2\u016c\1\0\2\u016c\2\0\1\u016c\1\0"+
    "\1\u016c\3\0\2\u016c\7\0\1\u016c\43\0\2\u016d\3\0"+
    "\3\u016d\5\0\1\u016d\3\0\2\u016d\1\0\2\u016d\2\0"+
    "\1\u016d\1\0\1\u016d\3\0\2\u016d\7\0\1\u016d\24\0"+
    "\2\u016e\5\0\2\u012e\1\0\1\u016e\1\0\1\u012e\1\u016f"+
    "\4\u012e\2\0\4\u012e\4\0\16\u012e\3\0\2\u012e\5\0"+
    "\15\u012e\26\0\1\u0170\122\0\1\u0171\75\0\2\u0132\3\0"+
    "\1\u0132\1\0\4\u0132\2\0\4\u0132\4\0\16\u0132\3\0"+
    "\2\u0132\5\0\15\u0132\31\0\2\u0172\3\0\3\u0172\5\0"+
    "\1\u0172\3\0\2\u0172\1\0\2\u0172\2\0\1\u0172\1\0"+
    "\1\u0172\3\0\2\u0172\7\0\1\u0172\43\0\2\u0173\3\0"+
    "\3\u0173\5\0\1\u0173\3\0\2\u0173\1\0\2\u0173\2\0"+
    "\1\u0173\1\0\1\u0173\3\0\2\u0173\7\0\1\u0173\44\0"+
    "\1\u0135\13\0\1\u0135\1\u0174\3\0\1\u0135\7\0\1\u0135"+
    "\13\0\1\u0174\14\0\1\u0175\45\0\1\u0174\27\0\1\u0174"+
    "\14\0\1\u0175\46\0\1\u0176\3\0\1\u0176\21\0\2\u0176"+
    "\3\0\1\u0176\20\0\1\346\2\347\1\346\1\u0177\1\u013a"+
    "\53\346\1\352\31\346\4\347\1\345\1\u013b\112\347\1\u013b"+
    "\31\347\1\u0178\3\347\1\u0178\21\347\2\u0178\3\347\1\u0178"+
    "\20\347\1\346\2\347\1\346\1\350\1\u013a\31\346\1\u0179"+
    "\3\346\1\u0179\15\346\1\352\3\346\2\u0179\3\346\1\u0179"+
    "\20\346\1\146\2\0\1\146\1\343\32\146\1\u017a\3\146"+
    "\1\u017a\15\146\1\152\3\146\2\u017a\3\146\1\u017a\20\146"+
    "\26\0\1\u017b\72\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\10\24\1\u017c\5\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\5\0\5\24\1\u017d\7\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\1\24\1\u017e\13\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\14\24\1\u017f\1\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\5\0\10\24\1\u0180\4\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\1\24"+
    "\1\u0181\14\24\3\0\2\24\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\14\24\1\u0182\1\24"+
    "\3\0\2\24\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\6\24\1\u0183\7\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\14\24\1\u0184\1\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\14\24"+
    "\1\u0185\1\24\3\0\2\24\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\1\24"+
    "\1\u0186\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\11\24\1\u0187\4\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\3\24\1\u0188\11\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\7\24\1\u0189\5\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\12\24\1\u018a\3\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\5\0\6\24\1\u018b"+
    "\6\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u018c\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\3\24\1\u018d\11\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\5\0\3\24"+
    "\1\u018e\11\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\13\24\1\u018f\2\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\5\0\4\24\1\u0190\10\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\3\24\1\u0191\11\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\5\0\3\24"+
    "\1\u0192\11\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\5\0\1\24\1\u0193\13\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\4\24"+
    "\1\u0194\11\24\3\0\2\24\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\5\24\1\u0195\7\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\5\0\13\24"+
    "\1\u0196\1\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u0197\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\1\24\1\u0198\13\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\13\24\1\u0199\2\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\1\24\1\u019a\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\13\24"+
    "\1\u019b\2\24\3\0\2\24\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\6\24\1\u019c\6\24\12\0\2\u016e\10\0\1\u016e"+
    "\2\0\1\u016f\122\0\1\u019d\167\0\1\u0175\46\0\1\u019e"+
    "\3\0\1\u019e\21\0\2\u019e\3\0\1\u019e\20\0\5\347"+
    "\1\u013b\31\347\1\u019f\3\347\1\u019f\21\347\2\u019f\3\347"+
    "\1\u019f\20\347\1\346\2\347\1\346\1\350\1\u013a\31\346"+
    "\1\u01a0\3\346\1\u01a0\15\346\1\352\3\346\2\u01a0\3\346"+
    "\1\u01a0\20\346\1\146\2\0\1\146\1\343\32\146\1\u01a1"+
    "\3\146\1\u01a1\15\146\1\152\3\146\2\u01a1\3\146\1\u01a1"+
    "\20\146\27\0\1\u01a2\71\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\5\0\1\24\1\u01a3"+
    "\13\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\6\24\1\u01a4\6\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\11\24\1\u01a5"+
    "\4\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\1\24\1\u01a6"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\5\0\1\24\1\u01a7\13\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\5\0\1\24\1\u01a8\13\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\15\24\1\u01a9\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\11\24\1\u01aa\4\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\1\24\1\u01ab\13\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\10\24\1\u01ac"+
    "\5\24\3\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\7\24\1\u01ad\6\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\6\24\1\u01ae\7\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\14\24\1\u01af\1\24\3\0\2\24\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\10\24\1\u01b0"+
    "\5\24\3\0\2\24\5\0\6\24\1\u01b1\6\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\6\24\1\u01b2\6\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\6\24\1\u01b3\6\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\4\24\1\u01b4\11\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\10\24\1\u01b5\4\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\5\0\11\24\1\u01b6\3\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\1\24\1\u01b7"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\4\24\1\u01b8\11\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\5\0\1\u01b9\14\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\4\24\1\u01ba\11\24\3\0"+
    "\2\24\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\14\24\1\u01bb\1\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\1\24\1\u01bc\13\24\40\0"+
    "\1\u01bd\122\0\1\u01be\3\0\1\u01be\21\0\2\u01be\3\0"+
    "\1\u01be\20\0\5\347\1\u013b\31\347\1\u01bf\3\347\1\u01bf"+
    "\21\347\2\u01bf\3\347\1\u01bf\20\347\1\346\2\347\1\346"+
    "\1\350\1\u013a\31\346\1\u01c0\3\346\1\u01c0\15\346\1\352"+
    "\3\346\2\u01c0\3\346\1\u01c0\20\346\1\146\2\0\1\146"+
    "\1\343\32\146\1\u01c1\3\146\1\u01c1\15\146\1\152\3\146"+
    "\2\u01c1\3\146\1\u01c1\20\146\30\0\1\u01c2\70\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\5\0\6\24\1\u01c3\6\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\1\24\1\u01c4\14\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\14\24\1\u01c5\1\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\4\24"+
    "\1\u01c6\11\24\3\0\2\24\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\12\24\1\u01c7\3\24"+
    "\3\0\2\24\5\0\15\24\12\0\3\u01c8\2\0\3\24"+
    "\2\0\1\u01c8\4\0\2\24\3\0\4\24\4\0\16\24"+
    "\1\u01c9\2\0\2\24\5\0\15\24\17\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\2\24\5\0"+
    "\12\24\1\u01ca\2\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\7\24\1\u01cb\6\24\3\0\2\24\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\5\24\1\u01cc\7\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u01cd\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\13\24\1\u01ce\2\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\13\24\1\u01cf\2\24\3\0\2\24\5\0\15\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\4\24"+
    "\1\u01d0\11\24\3\0\2\24\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\13\24\1\u01d1\2\24"+
    "\3\0\2\24\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\1\24\1\u01d2\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\14\24\1\u01d3\1\24\3\0\2\24\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u01d4\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\14\24\1\u01d5\1\24\3\0\2\24"+
    "\5\0\15\24\41\0\1\u01d6\121\0\1\u01d7\3\0\1\u01d7"+
    "\21\0\2\u01d7\3\0\1\u01d7\20\0\5\347\1\u013b\31\347"+
    "\1\u01d8\3\347\1\u01d8\21\347\2\u01d8\3\347\1\u01d8\20\347"+
    "\1\346\2\347\1\346\1\350\1\u013a\31\346\1\u01d9\3\346"+
    "\1\u01d9\15\346\1\352\3\346\2\u01d9\3\346\1\u01d9\20\346"+
    "\1\146\2\0\1\146\1\343\32\146\1\u01da\3\146\1\u01da"+
    "\15\146\1\152\3\146\2\u01da\3\146\1\u01da\20\146\27\0"+
    "\1\u01db\71\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u01dc\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\16\24\3\0\1\24"+
    "\1\u01dd\5\0\15\24\17\0\3\24\7\0\2\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\5\0\6\24\1\u01de"+
    "\6\24\12\0\3\u01c8\7\0\1\u01c8\37\0\1\u01c9\40\0"+
    "\3\u01c9\5\0\1\u01df\1\0\1\u01c9\5\0\1\u01e0\13\0"+
    "\1\u01e0\4\0\1\u01e0\7\0\1\u01e0\46\0\3\24\7\0"+
    "\2\24\3\0\4\24\4\0\16\24\3\0\1\24\1\u01e1"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\5\0\6\24\1\u01e2\6\24"+
    "\17\0\3\24\7\0\2\24\3\0\4\24\4\0\4\24"+
    "\1\u01e3\11\24\3\0\2\24\5\0\15\24\17\0\3\24"+
    "\7\0\2\24\3\0\4\24\4\0\11\24\1\u01e4\4\24"+
    "\3\0\2\24\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\1\24\1\u01e5\5\0"+
    "\15\24\17\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\4\24\1\u01e6\11\24\3\0\2\24\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u01e7\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\5\0\12\24"+
    "\1\u01e8\2\24\40\0\1\u01e9\63\0\1\346\2\347\1\346"+
    "\1\350\1\u013a\31\346\1\u01ea\3\346\1\u01ea\15\346\1\352"+
    "\3\346\2\u01ea\3\346\1\u01ea\20\346\24\0\1\u01eb\74\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\7\24\1\u01ec"+
    "\6\24\3\0\2\24\5\0\15\24\32\0\1\u01ed\13\0"+
    "\1\u01ed\4\0\1\u01ed\7\0\1\u01ed\41\0\3\u01ee\5\0"+
    "\1\u01ed\1\0\1\u01ee\5\0\1\u01e0\13\0\1\u01e0\4\0"+
    "\1\u01e0\2\0\1\u01ee\4\0\1\u01e0\1\0\1\u01ef\1\0"+
    "\2\u01f0\41\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\14\24\1\u01f1\1\24\3\0\2\24\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u01f2\5\0\15\24\17\0\3\24\7\0\2\24"+
    "\3\0\4\24\4\0\12\24\1\u01f3\3\24\3\0\2\24"+
    "\5\0\15\24\17\0\3\24\7\0\2\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u01f4\5\0\15\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\7\24\1\u01f5"+
    "\6\24\3\0\2\24\5\0\15\24\35\0\1\u01f6\67\0"+
    "\3\u01ee\7\0\1\u01ee\5\0\1\u01ed\13\0\1\u01ed\4\0"+
    "\1\u01ed\2\0\1\u01ee\4\0\1\u01ed\1\0\1\u01ef\1\0"+
    "\2\u01f0\34\0\3\u01ee\7\0\1\u01ee\40\0\1\u01ef\37\0"+
    "\3\u01ef\5\0\1\u01f7\1\0\1\u01ef\5\0\1\u01f8\13\0"+
    "\1\u01f8\4\0\1\u01f8\7\0\1\u01f8\55\0\1\u01f9\3\0"+
    "\1\u01fa\13\0\1\u01fa\4\0\1\u01fa\7\0\1\u01fa\5\0"+
    "\1\u01f9\40\0\3\24\7\0\2\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\5\0\5\24\1\u01fb\7\24\17\0"+
    "\3\24\7\0\2\24\3\0\4\24\4\0\10\24\1\u01fc"+
    "\5\24\3\0\2\24\5\0\15\24\32\0\1\u01fd\13\0"+
    "\1\u01fd\4\0\1\u01fd\7\0\1\u01fd\41\0\3\u01fe\5\0"+
    "\1\u01fd\1\0\1\u01fe\5\0\1\u01f8\13\0\1\u01f8\4\0"+
    "\1\u01f8\2\0\1\u01fe\4\0\1\u01f8\1\0\1\u01ff\1\0"+
    "\2\u0200\54\0\1\u01fa\13\0\1\u01fa\4\0\1\u01fa\7\0"+
    "\1\u01fa\41\0\3\u01ee\7\0\1\u01ee\5\0\1\u01fa\13\0"+
    "\1\u01fa\4\0\1\u01fa\2\0\1\u01ee\4\0\1\u01fa\1\0"+
    "\1\u01ef\37\0\3\u01fe\7\0\1\u01fe\5\0\1\u01fd\13\0"+
    "\1\u01fd\4\0\1\u01fd\2\0\1\u01fe\4\0\1\u01fd\1\0"+
    "\1\u01ff\1\0\2\u0200\34\0\3\u01fe\7\0\1\u01fe\40\0"+
    "\1\u01ff\37\0\3\u01ff\5\0\1\u0201\1\0\1\u01ff\5\0"+
    "\1\u0202\13\0\1\u0202\4\0\1\u0202\7\0\1\u0202\55\0"+
    "\1\u0203\3\0\1\u0204\13\0\1\u0204\4\0\1\u0204\7\0"+
    "\1\u0204\5\0\1\u0203\53\0\1\u0205\13\0\1\u0205\4\0"+
    "\1\u0205\7\0\1\u0205\41\0\3\u0206\5\0\1\u0205\1\0"+
    "\1\u0206\5\0\1\u0202\13\0\1\u0202\4\0\1\u0202\2\0"+
    "\1\u0206\4\0\1\u0202\1\0\1\u0207\1\0\2\u0208\54\0"+
    "\1\u0204\13\0\1\u0204\4\0\1\u0204\7\0\1\u0204\41\0"+
    "\3\u01fe\7\0\1\u01fe\5\0\1\u0204\13\0\1\u0204\4\0"+
    "\1\u0204\2\0\1\u01fe\4\0\1\u0204\1\0\1\u01ff\37\0"+
    "\3\u0206\7\0\1\u0206\5\0\1\u0205\13\0\1\u0205\4\0"+
    "\1\u0205\2\0\1\u0206\4\0\1\u0205\1\0\1\u0207\1\0"+
    "\2\u0208\34\0\3\u0206\7\0\1\u0206\40\0\1\u0207\37\0"+
    "\3\u0207\5\0\1\u0209\1\0\1\u0207\5\0\1\u020a\13\0"+
    "\1\u020a\4\0\1\u020a\7\0\1\u020a\55\0\1\u020b\3\0"+
    "\1\u020c\13\0\1\u020c\4\0\1\u020c\7\0\1\u020c\5\0"+
    "\1\u020b\53\0\1\u020d\13\0\1\u020d\4\0\1\u020d\7\0"+
    "\1\u020d\41\0\3\u020e\5\0\1\u020d\1\0\1\u020e\5\0"+
    "\1\u020a\13\0\1\u020a\4\0\1\u020a\2\0\1\u020e\4\0"+
    "\1\u020a\2\0\1\u020f\2\u0210\54\0\1\u020c\13\0\1\u020c"+
    "\4\0\1\u020c\7\0\1\u020c\41\0\3\u0206\7\0\1\u0206"+
    "\5\0\1\u020c\13\0\1\u020c\4\0\1\u020c\2\0\1\u0206"+
    "\4\0\1\u020c\1\0\1\u0207\37\0\3\u020e\7\0\1\u020e"+
    "\5\0\1\u020d\13\0\1\u020d\4\0\1\u020d\2\0\1\u020e"+
    "\4\0\1\u020d\2\0\1\u020f\2\u0210\34\0\3\u020e\7\0"+
    "\1\u020e\41\0\1\u020f\52\0\1\u0211\3\0\1\u0212\13\0"+
    "\1\u0212\4\0\1\u0212\7\0\1\u0212\5\0\1\u0211\53\0"+
    "\1\u0212\13\0\1\u0212\4\0\1\u0212\7\0\1\u0212\41\0"+
    "\3\u020e\7\0\1\u020e\5\0\1\u0212\13\0\1\u0212\4\0"+
    "\1\u0212\2\0\1\u020e\4\0\1\u0212\2\0\1\u020f\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27825];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\1\1\1\11\14\1\2\11\1\1\2\11"+
    "\10\1\3\11\17\1\4\11\6\1\2\11\3\1\2\11"+
    "\1\1\1\11\3\1\2\11\1\1\1\11\2\1\2\11"+
    "\3\1\1\11\2\1\2\11\1\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\0\2\11\1\1\2\11\1\1\5\11"+
    "\1\0\2\11\3\1\1\0\25\1\2\11\2\0\30\1"+
    "\1\11\1\1\1\11\1\1\5\11\2\1\7\11\1\0"+
    "\1\11\1\0\1\11\1\0\2\11\3\0\1\1\2\0"+
    "\2\11\2\1\7\11\1\1\2\0\2\1\1\11\2\0"+
    "\1\1\2\0\1\1\2\11\2\0\1\11\1\1\1\11"+
    "\1\0\1\1\1\11\31\1\2\11\27\1\2\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\1\4\0\2\11\1\1"+
    "\2\0\4\1\1\11\1\0\1\11\51\1\1\0\1\11"+
    "\1\0\2\11\2\0\1\11\1\0\1\11\5\1\1\0"+
    "\41\1\1\0\4\1\1\0\32\1\1\0\4\1\1\0"+
    "\5\1\2\0\14\1\1\0\1\11\3\1\1\0\3\1"+
    "\2\0\10\1\1\0\1\1\1\11\1\1\4\0\5\1"+
    "\1\11\4\0\2\1\22\0\1\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    private String sourceCode;

    private int repeatNum = 1;

    private boolean enableWhiteSpace = false;

    private int yyStartOffset = 0;

    private final Pattern float4Pattern = Pattern.compile("float4.*\\([\r\n \t\f]*(?<f1>[^\r\n \t\f]+)[\r\n \t\f]*,[\r\n \t\f]*(?<f2>[^\r\n \t\f]+)[\r\n \t\f]*,[\r\n \t\f]*(?<f3>[^\r\n \t\f]+)[\r\n \t\f]*,[\r\n \t\f]*(?<f4>[^\r\n \t\f]+)[\r\n \t\f]*\\)", Pattern.MULTILINE);

    public ActionScriptLexer(String sourceCode){
        this(new StringReader(sourceCode));
        this.sourceCode = sourceCode;
    }

    public void yypushbackstr(String s, int state, int skipNumChars)
    {
        int numLines = count(s, "\n");
        int newYyline = yyline - numLines;
        yyStartOffset = yyStartOffset + skipNumChars + yychar;
        sourceCode = s + sourceCode.substring(yychar + yylength());
        yyreset(new StringReader(sourceCode));
        yybegin(state);
        yyline = newYyline;
    }

    public void setEnableWhiteSpace(boolean enable)
    {
        this.enableWhiteSpace = enable;
    }

    public void begin(int state)
    {
        string.setLength(0);
        yybegin(state);
    }

    StringBuilder string = new StringBuilder();

    private static String xmlTagName = "";

    private int startPos = -1;

    public int yychar() {
        return yyStartOffset + yychar;
    }

    private Stack<ParsedSymbol> pushedBack = new Stack<>();

    public int yyline() {
        return yyline + 1;
    }

    private List<LexListener> listeners=new ArrayList<>();

    public void addListener(LexListener listener){
        listeners.add(listener);
    }

    public void removeListener(LexListener listener){
        listeners.remove(listener);
    }

    public void informListenersLex(ParsedSymbol s){
        for(LexListener l:listeners){
            l.onLex(s);
        }
    }

    public void informListenersPushBack(ParsedSymbol s){
        for(LexListener l:listeners){
            l.onPushBack(s);
        }
    }

    public void pushback(ParsedSymbol symb) {
        pushedBack.push(symb);
        last = null;
        informListenersPushBack(symb);
    }

    ParsedSymbol last;
    public ParsedSymbol lex() throws java.io.IOException, AVM2ParseException{
        ParsedSymbol ret = null;
        if (!pushedBack.isEmpty()){
            ret = last = pushedBack.pop();
        } else {
            ret = last = yylex();
        }
        informListenersLex(ret);
        return ret;
    }

    private int count(String str, String target) {
        return (str.length() - str.replace(target, "").length()) / target.length();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ActionScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ParsedSymbol yylex() throws java.io.IOException, AVM2ParseException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 185: break;
        case 2: 
          { yyline++;
                                    if (enableWhiteSpace) { return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_WHITESPACE, yytext()); }
          }
        case 186: break;
        case 3: 
          { if (enableWhiteSpace) { return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_WHITESPACE, yytext()); }
          }
        case 187: break;
        case 4: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DIVIDE, yytext());
          }
        case 188: break;
        case 5: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.MULTIPLY, yytext());
          }
        case 189: break;
        case 6: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.IDENTIFIER, yytext());
          }
        case 190: break;
        case 7: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DOT, yytext());
          }
        case 191: break;
        case 8: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.LOWER_THAN, yytext());
          }
        case 192: break;
        case 9: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NOT, yytext());
          }
        case 193: break;
        case 10: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.MINUS, yytext());
          }
        case 194: break;
        case 11: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.GREATER_THAN, yytext());
          }
        case 195: break;
        case 12: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.COLON, yytext());
          }
        case 196: break;
        case 13: 
          { String ival = yytext();
                                    if (ival.endsWith("i") || ival.endsWith("u")) {
                                        ival = ival.substring(0, ival.length() - 1);
                                    }
                                    try{
                                        return new ParsedSymbol(yychar(), SymbolGroup.INTEGER, SymbolType.INTEGER, Integer.parseInt(ival)); 
                                    } catch(NumberFormatException nfe){
                                        //its too long for an Integer var
                                        return new ParsedSymbol(yychar(), SymbolGroup.DOUBLE, SymbolType.DOUBLE, Double.parseDouble(ival)); 
                                    }
          }
        case 197: break;
        case 14: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.TERNAR, yytext());
          }
        case 198: break;
        case 15: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.BRACKET_OPEN, yytext());
          }
        case 199: break;
        case 16: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.BRACKET_CLOSE, yytext());
          }
        case 200: break;
        case 17: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN, yytext());
          }
        case 201: break;
        case 18: 
          { startPos = yychar();
                                    string.setLength(0);
                                    yybegin(STRING);
          }
        case 202: break;
        case 19: 
          { startPos = yychar();
                                    string.setLength(0);
                                    yybegin(CHARLITERAL);
          }
        case 203: break;
        case 20: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.PARENT_OPEN, yytext());
          }
        case 204: break;
        case 21: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.COMMA, yytext());
          }
        case 205: break;
        case 22: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.PARENT_CLOSE, yytext());
          }
        case 206: break;
        case 23: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.PLUS, yytext());
          }
        case 207: break;
        case 24: 
          { startPos = yychar();
                                    string.setLength(0);
                                    yybegin(OIDENTIFIER);
          }
        case 208: break;
        case 25: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ATTRIBUTE, yytext());
          }
        case 209: break;
        case 26: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.CURLY_OPEN, yytext());
          }
        case 210: break;
        case 27: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.CURLY_CLOSE, yytext());
          }
        case 211: break;
        case 28: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.SEMICOLON, yytext());
          }
        case 212: break;
        case 29: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NEGATE, yytext());
          }
        case 213: break;
        case 30: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.BITAND, yytext());
          }
        case 214: break;
        case 31: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.BITOR, yytext());
          }
        case 215: break;
        case 32: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.XOR, yytext());
          }
        case 216: break;
        case 33: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.MODULO, yytext());
          }
        case 217: break;
        case 34: 
          { string.append(yytext());
          }
        case 218: break;
        case 35: 
          { yybegin(YYINITIAL); yyline++;
          }
        case 219: break;
        case 36: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     String tos = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(startPos, SymbolGroup.STRING, SymbolType.STRING, tos);
          }
        case 220: break;
        case 37: 
          { yybegin(YYINITIAL);  yyline++;
          }
        case 221: break;
        case 38: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return new ParsedSymbol(startPos, SymbolGroup.STRING, SymbolType.STRING, string.toString());
          }
        case 222: break;
        case 39: 
          { string.append(yytext());  yyline++;
          }
        case 223: break;
        case 40: 
          { yybegin(XML);
                                    pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_STARTTAG_END, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 224: break;
        case 41: 
          { yybegin(YYINITIAL);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRNAMEVAR_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 225: break;
        case 42: 
          { yybegin(XML);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.GREATER_THAN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 226: break;
        case 43: 
          { yybegin(YYINITIAL);
                                      return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRVALVAR_BEGIN, yytext());
          }
        case 227: break;
        case 44: 
          { string.append(yytext()); yyline++;
          }
        case 228: break;
        case 45: 
          { yybegin(YYINITIAL);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_VAR_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 229: break;
        case 46: 
          { for(int r=0;r<repeatNum;r++) string.append(yytext()); repeatNum = 1;
          }
        case 230: break;
        case 47: 
          { yybegin(YYINITIAL);
                                     repeatNum = 1;
                                     // length also includes the trailing quote
                                     return new ParsedSymbol(startPos, SymbolGroup.IDENTIFIER, SymbolType.IDENTIFIER, string.toString());
          }
        case 231: break;
        case 48: 
          { yyline += count(yytext(),"\n");
          }
        case 232: break;
        case 49: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_DIVIDE, yytext());
          }
        case 233: break;
        case 50: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_MULTIPLY, yytext());
          }
        case 234: break;
        case 51: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DESCENDANTS, yytext());
          }
        case 235: break;
        case 52: 
          { return new ParsedSymbol(yychar(), SymbolGroup.TYPENAME, SymbolType.TYPENAME, yytext());
          }
        case 236: break;
        case 53: 
          { String dval = yytext();
                                    if (dval.endsWith("m")) {
                                        dval = dval.substring(0, dval.length() - 1);
                                        return new ParsedSymbol(yychar(), SymbolGroup.DECIMAL, SymbolType.DECIMAL, new Decimal128(dval));
                                    }
                                    if (dval.endsWith("f")) {
                                        dval = dval.substring(0, dval.length() - 1);
                                        return new ParsedSymbol(yychar(), SymbolGroup.FLOAT, SymbolType.FLOAT, Float.parseFloat(dval));
                                    }
                                    if (dval.endsWith("d")) {
                                        dval = dval.substring(0, dval.length() - 1);
                                    }
                                    return new ParsedSymbol(yychar(), SymbolGroup.DOUBLE, SymbolType.DOUBLE, Double.parseDouble(dval));
          }
        case 237: break;
        case 54: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.FILTER, yytext());
          }
        case 238: break;
        case 55: 
          { startPos = yychar();
                                    yybegin(XMLOPENTAG);
                                    string.setLength(0);
                                    return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTTAG_BEGIN, yytext());
          }
        case 239: break;
        case 56: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.SHIFT_LEFT, yytext());
          }
        case 240: break;
        case 57: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.LOWER_EQUAL, yytext());
          }
        case 241: break;
        case 58: 
          { return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTVARTAG_BEGIN, yytext());
          }
        case 242: break;
        case 59: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NOT_EQUAL, yytext());
          }
        case 243: break;
        case 60: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DECREMENT, yytext());
          }
        case 244: break;
        case 61: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_MINUS, yytext());
          }
        case 245: break;
        case 62: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.SHIFT_RIGHT, yytext());
          }
        case 246: break;
        case 63: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.GREATER_EQUAL, yytext());
          }
        case 247: break;
        case 64: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NAMESPACE_OP, yytext());
          }
        case 248: break;
        case 65: 
          { String fval = yytext();
                                    if (fval.endsWith("f")) {
                                        fval = fval.substring(0, fval.length() - 1);
                                    }
                                    return new ParsedSymbol(yychar(), SymbolGroup.FLOAT, SymbolType.FLOAT, Float.parseFloat(fval));
          }
        case 249: break;
        case 66: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NULL_DOT, yytext());
          }
        case 250: break;
        case 67: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NULL_COALESCE, yytext());
          }
        case 251: break;
        case 68: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.EQUALS, yytext());
          }
        case 252: break;
        case 69: 
          { try {
                                        return new ParsedSymbol(yychar(), SymbolGroup.INTEGER, SymbolType.INTEGER, Integer.parseInt(yytext(), 8));
                                   } catch (NumberFormatException nfe) {
                                        //its too long for an Integer var
                                        return new ParsedSymbol(yychar(), SymbolGroup.DOUBLE, SymbolType.DOUBLE, new BigInteger(yytext(), 8).doubleValue()); 
                                   }
          }
        case 253: break;
        case 70: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.DO, yytext());
          }
        case 254: break;
        case 71: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.AS, yytext());
          }
        case 255: break;
        case 72: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_PLUS, yytext());
          }
        case 256: break;
        case 73: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.INCREMENT, yytext());
          }
        case 257: break;
        case 74: 
          { return new ParsedSymbol(yychar(), SymbolGroup.NAMESPACESUFFIX, SymbolType.NAMESPACESUFFIX, Integer.parseInt(yytext().substring(1)));
          }
        case 258: break;
        case 75: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.IF, yytext());
          }
        case 259: break;
        case 76: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.IS, yytext());
          }
        case 260: break;
        case 77: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.IN, yytext());
          }
        case 261: break;
        case 78: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_BITAND, yytext());
          }
        case 262: break;
        case 79: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.AND, yytext());
          }
        case 263: break;
        case 80: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_BITOR, yytext());
          }
        case 264: break;
        case 81: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.OR, yytext());
          }
        case 265: break;
        case 82: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_XOR, yytext());
          }
        case 266: break;
        case 83: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_MODULO, yytext());
          }
        case 267: break;
        case 84: 
          { /* ignore illegal character escape */
          }
        case 268: break;
        case 85: 
          { string.append('\"');
          }
        case 269: break;
        case 86: 
          { string.append('\'');
          }
        case 270: break;
        case 87: 
          { string.append('\f');
          }
        case 271: break;
        case 88: 
          { string.append('\t');
          }
        case 272: break;
        case 89: 
          { string.append('\\');
          }
        case 273: break;
        case 90: 
          { string.append('\b');
          }
        case 274: break;
        case 91: 
          { string.append('\r');
          }
        case 275: break;
        case 92: 
          { string.append('\n');
          }
        case 276: break;
        case 93: 
          { yybegin(XML);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTFINISHTAG_END, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 277: break;
        case 94: 
          { yybegin(XMLOPENTAGATTRIB);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRIBUTENAME, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 278: break;
        case 95: 
          { yybegin(XMLOPENTAG);
                                        return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRIBUTEVALUE, yytext());
          }
        case 279: break;
        case 96: 
          { yybegin(XMLOPENTAG);
                                        return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRIBUTEVALUE_SINGLEQUOTED, yytext());
          }
        case 280: break;
        case 97: 
          { yybegin(XML);
                                    string.append(yytext());
                                    String tos = string.toString();
                                    string.setLength(0);
                                    return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_INSTR, tos);
          }
        case 281: break;
        case 98: 
          { yybegin(XMLOPENTAG);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTTAG_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 282: break;
        case 99: 
          { yybegin(YYINITIAL);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTVARTAG_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 283: break;
        case 100: 
          { throw new AVM2ParseException("Illegal escape sequence \"" + yytext() + "\"", yyline + 1);
          }
        case 284: break;
        case 101: 
          { for(int r=0;r<repeatNum;r++) string.append('\f'); repeatNum = 1;
          }
        case 285: break;
        case 102: 
          { for(int r=0;r<repeatNum;r++) string.append('\t'); repeatNum = 1;
          }
        case 286: break;
        case 103: 
          { for(int r=0;r<repeatNum;r++) string.append('\\'); repeatNum = 1;
          }
        case 287: break;
        case 104: 
          { for(int r=0;r<repeatNum;r++) string.append('\u00A7'); repeatNum = 1;
          }
        case 288: break;
        case 105: 
          { for(int r=0;r<repeatNum;r++) string.append('\b'); repeatNum = 1;
          }
        case 289: break;
        case 106: 
          { for(int r=0;r<repeatNum;r++) string.append('\r'); repeatNum = 1;
          }
        case 290: break;
        case 107: 
          { for(int r=0;r<repeatNum;r++) string.append('\n'); repeatNum = 1;
          }
        case 291: break;
        case 108: 
          { // check for a /* */ comment
                                    if(String.valueOf(yytext().charAt(1)).equals("*"))
                                    {
                                        yyline += count(yytext(),"\n");
                                        return null;
                                    }
                                    return new ParsedSymbol(yychar(), SymbolGroup.REGEXP, SymbolType.REGEXP, yytext());
          }
        case 292: break;
        case 109: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.REST, yytext());
          }
        case 293: break;
        case 110: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_SHIFT_LEFT, yytext());
          }
        case 294: break;
        case 111: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.STRICT_NOT_EQUAL, yytext());
          }
        case 295: break;
        case 112: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.USHIFT_RIGHT, yytext());
          }
        case 296: break;
        case 113: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_SHIFT_RIGHT, yytext());
          }
        case 297: break;
        case 114: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.STRICT_EQUALS, yytext());
          }
        case 298: break;
        case 115: 
          { try {
                                        return new ParsedSymbol(yychar(), SymbolGroup.INTEGER, SymbolType.INTEGER, Integer.parseInt(yytext().substring(2), 16));
                                    } catch (NumberFormatException nfe) {
                                        //its too long for an Integer var
                                        return new ParsedSymbol(yychar(), SymbolGroup.DOUBLE, SymbolType.DOUBLE, new BigInteger(yytext().substring(2), 16).doubleValue()); 
                                    }
          }
        case 299: break;
        case 116: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.USE, yytext());
          }
        case 300: break;
        case 117: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.FOR, yytext());
          }
        case 301: break;
        case 118: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.TRY, yytext());
          }
        case 302: break;
        case 119: 
          { return new ParsedSymbol(yychar(), SymbolGroup.PREPROCESSOR, SymbolType.PREPROCESSOR, yytext().substring(2));
          }
        case 303: break;
        case 120: 
          { String verbatimString = yytext();
                                    verbatimString = verbatimString.substring(2, verbatimString.length() - 1);
                                    return new ParsedSymbol(yychar(), SymbolGroup.STRING, SymbolType.STRING, verbatimString);
          }
        case 304: break;
        case 121: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.GET, yytext());
          }
        case 305: break;
        case 122: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.SET, yytext());
          }
        case 306: break;
        case 123: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NEW, yytext());
          }
        case 307: break;
        case 124: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.VAR, yytext());
          }
        case 308: break;
        case 125: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_AND, yytext());
          }
        case 309: break;
        case 126: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_OR, yytext());
          }
        case 310: break;
        case 127: 
          { string.append(yytext());
                                     yybegin(XML);
                                     String ret = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_CDATA, ret);
          }
        case 311: break;
        case 128: 
          { string.append(yytext());
                                     yybegin(XML);
                                     String ret = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_COMMENT, ret);
          }
        case 312: break;
        case 129: 
          { yybegin(YYINITIAL);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_FINISHVARTAG_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 313: break;
        case 130: 
          { yybegin(XMLINSTR);
                                    if (string.length() > 0){
                                       String tos = string.toString(); 
                                       string.setLength(0);
                                       string.append(yytext());
                                       return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_TEXT, tos);                                       
                                    }
                                    string.append(yytext());
          }
        case 314: break;
        case 131: 
          { string.append(yytext());
                                     yybegin(YYINITIAL);
                                     String ret = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_CDATA, ret);
          }
        case 315: break;
        case 132: 
          { string.append(yytext());
                                     yybegin(YYINITIAL);
                                     String ret = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_COMMENT, ret);
          }
        case 316: break;
        case 133: 
          { string.setLength(0); string.append(yytext() ); yybegin(XMLCOMMENTALONE);
          }
        case 317: break;
        case 134: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_USHIFT_RIGHT, yytext());
          }
        case 318: break;
        case 135: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CASE, yytext());
          }
        case 319: break;
        case 136: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.TRUE, yytext());
          }
        case 320: break;
        case 137: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.THIS, yytext());
          }
        case 321: break;
        case 138: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.ELSE, yytext());
          }
        case 322: break;
        case 139: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.EACH, yytext());
          }
        case 323: break;
        case 140: 
          { return new ParsedSymbol(yychar(), SymbolGroup.GLOBALCONST, SymbolType.NULL, yytext());
          }
        case 324: break;
        case 141: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.WITH, yytext());
          }
        case 325: break;
        case 142: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.VOID, yytext());
          }
        case 326: break;
        case 143: 
          { char val = (char) Integer.parseInt(yytext().substring(2), 16);
                        				   string.append(val);
          }
        case 327: break;
        case 144: 
          { pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_FINISHTAG, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 328: break;
        case 145: 
          { String ret = string.toString(); string.setLength(0); string.append(yytext()); yybegin(XMLCOMMENT);
                                     if (!ret.isEmpty()) return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_TEXT, ret);
          }
        case 329: break;
        case 146: 
          { char val = (char) Integer.parseInt(yytext().substring(2), 16);
                        				   for(int r=0;r<repeatNum;r++) string.append(val); repeatNum = 1;
          }
        case 330: break;
        case 147: 
          { repeatNum = Integer.parseInt(yytext().substring(2, yytext().length()-1));
          }
        case 331: break;
        case 148: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CLASS, yytext());
          }
        case 332: break;
        case 149: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CONST, yytext());
          }
        case 333: break;
        case 150: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CATCH, yytext());
          }
        case 334: break;
        case 151: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.FALSE, yytext());
          }
        case 335: break;
        case 152: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.FINAL, yytext());
          }
        case 336: break;
        case 153: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.THROW, yytext());
          }
        case 337: break;
        case 154: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.BREAK, yytext());
          }
        case 338: break;
        case 155: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.SUPER, yytext());
          }
        case 339: break;
        case 156: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.WHILE, yytext());
          }
        case 340: break;
        case 157: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DELETE, yytext());
          }
        case 341: break;
        case 158: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.TYPEOF, yytext());
          }
        case 342: break;
        case 159: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.IMPORT, yytext());
          }
        case 343: break;
        case 160: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.RETURN, yytext());
          }
        case 344: break;
        case 161: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.STATIC, yytext());
          }
        case 345: break;
        case 162: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.SWITCH, yytext());
          }
        case 346: break;
        case 163: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.NATIVE, yytext());
          }
        case 347: break;
        case 164: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.PUBLIC, yytext());
          }
        case 348: break;
        case 165: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.DEFAULT, yytext());
          }
        case 349: break;
        case 166: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.DYNAMIC, yytext());
          }
        case 350: break;
        case 167: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.FINALLY, yytext());
          }
        case 351: break;
        case 168: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.EXTENDS, yytext());
          }
        case 352: break;
        case 169: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.PACKAGE, yytext());
          }
        case 353: break;
        case 170: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.PRIVATE, yytext());
          }
        case 354: break;
        case 171: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CONTINUE, yytext());
          }
        case 355: break;
        case 172: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.FUNCTION, yytext());
          }
        case 356: break;
        case 173: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.OVERRIDE, yytext());
          }
        case 357: break;
        case 174: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.INTERNAL, yytext());
          }
        case 358: break;
        case 175: 
          { return new ParsedSymbol(yychar(), SymbolGroup.GLOBALCONST, SymbolType.INFINITY, yytext());
          }
        case 359: break;
        case 176: 
          { string.setLength(0); string.append(yytext() ); yybegin(XMLCDATAALONE);
          }
        case 360: break;
        case 177: 
          { return new ParsedSymbol(yychar(), SymbolGroup.GLOBALCONST, SymbolType.UNDEFINED, yytext());
          }
        case 361: break;
        case 178: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.INTERFACE, yytext());
          }
        case 362: break;
        case 179: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.NAMESPACE, yytext());
          }
        case 363: break;
        case 180: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.PROTECTED, yytext());
          }
        case 364: break;
        case 181: 
          { String ret = string.toString(); string.setLength(0); string.append(yytext() ); yybegin(XMLCDATA);
                                    if (!ret.isEmpty()) return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_TEXT, ret);
          }
        case 365: break;
        case 182: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.IMPLEMENTS, yytext());
          }
        case 366: break;
        case 183: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.INSTANCEOF, yytext());
          }
        case 367: break;
        case 184: 
          { Matcher f4Matcher = float4Pattern.matcher(yytext());
                                    f4Matcher.matches();
                                    float[] fvalues = new float[4];
                                    for (int i = 0; i < 4; i++) {
                                        String fval = f4Matcher.group("f" + (i + 1));
                                        if (fval.endsWith("f")) {
                                            fval = fval.substring(0, fval.length() - 1);
                                        }
                                        fvalues[i] = Float.parseFloat(fval);
                                    }
                                    return new ParsedSymbol(yychar(), SymbolGroup.FLOAT4, SymbolType.FLOAT4, new Float4(fvalues));
          }
        case 368: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return new ParsedSymbol(yychar(), SymbolGroup.EOF, SymbolType.EOF, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
